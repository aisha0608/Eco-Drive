import React, { useEffect, useState } from 'react';
import { StyleSheet, View, Dimensions } from 'react-native';
import MapView, { Polyline } from 'react-native-maps';
import { useRoute } from '@react-navigation/native';

const MapScreen = () => {
  const [routeCoordinates, setRouteCoordinates] = useState([]);
  const route = useRoute(); // Hook to get access to the route object
  const { start, end } = route.params; // Destructuring start and end from passed parameters

  useEffect(() => {
    const fetchRoute = async (start, end) => {
      const apiKey = 'YOUR_TOMTOM_API_KEY';
      const url = `https://api.tomtom.com/routing/1/calculateRoute/${start.lat},${start.lng}:${end.lat},${end.lng}/json?avoid=unpavedRoads&key=${apiKey}`;

      try {
        const response = await fetch(url);
        const json = await response.json();
        const points = json.routes[0].legs[0].points.map(p => ({
          latitude: p.latitude,
          longitude: p.longitude,
        }));
        return points;
      } catch (error) {
        console.error(error);
        return [];
      }
    };

    if (start && end) {
      fetchRoute(start, end).then(setRouteCoordinates);
    }
  }, [start, end]);

  return (
    <View style={styles.container}>
      <MapView
        style={styles.map}
        initialRegion={{
          latitude: start.lat,
          longitude: start.lng,
          latitudeDelta: Math.abs(start.lat - end.lat) * 2,
          longitudeDelta: Math.abs(start.lng - end.lng) * 2,
        }}
      >
        {routeCoordinates.length > 0 && (
          <Polyline coordinates={routeCoordinates} strokeWidth={5} strokeColor="red" />
        )}
      </MapView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
  map: {
    width: Dimensions.get('window').width,
    height: Dimensions.get('window').height,
  },
});

export default MapScreen;






